// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: traffic.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TrafficAnalyzer_ReceiveData_FullMethodName            = "/main.TrafficAnalyzer/ReceiveData"
	TrafficAnalyzer_GetTodayStatistics_FullMethodName     = "/main.TrafficAnalyzer/GetTodayStatistics"
	TrafficAnalyzer_GetLastWeekStatistics_FullMethodName  = "/main.TrafficAnalyzer/GetLastWeekStatistics"
	TrafficAnalyzer_GetNextWeekPredictions_FullMethodName = "/main.TrafficAnalyzer/GetNextWeekPredictions"
)

// TrafficAnalyzerClient is the client API for TrafficAnalyzer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrafficAnalyzerClient interface {
	ReceiveData(ctx context.Context, in *TrafficData, opts ...grpc.CallOption) (*TrafficDataReceiveResponse, error)
	GetTodayStatistics(ctx context.Context, in *IntersectionRequest, opts ...grpc.CallOption) (*TrafficAnalytics, error)
	GetLastWeekStatistics(ctx context.Context, in *IntersectionRequest, opts ...grpc.CallOption) (*TrafficAnalytics, error)
	GetNextWeekPredictions(ctx context.Context, in *IntersectionRequest, opts ...grpc.CallOption) (*TrafficAnalytics, error)
}

type trafficAnalyzerClient struct {
	cc grpc.ClientConnInterface
}

func NewTrafficAnalyzerClient(cc grpc.ClientConnInterface) TrafficAnalyzerClient {
	return &trafficAnalyzerClient{cc}
}

func (c *trafficAnalyzerClient) ReceiveData(ctx context.Context, in *TrafficData, opts ...grpc.CallOption) (*TrafficDataReceiveResponse, error) {
	out := new(TrafficDataReceiveResponse)
	err := c.cc.Invoke(ctx, TrafficAnalyzer_ReceiveData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficAnalyzerClient) GetTodayStatistics(ctx context.Context, in *IntersectionRequest, opts ...grpc.CallOption) (*TrafficAnalytics, error) {
	out := new(TrafficAnalytics)
	err := c.cc.Invoke(ctx, TrafficAnalyzer_GetTodayStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficAnalyzerClient) GetLastWeekStatistics(ctx context.Context, in *IntersectionRequest, opts ...grpc.CallOption) (*TrafficAnalytics, error) {
	out := new(TrafficAnalytics)
	err := c.cc.Invoke(ctx, TrafficAnalyzer_GetLastWeekStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficAnalyzerClient) GetNextWeekPredictions(ctx context.Context, in *IntersectionRequest, opts ...grpc.CallOption) (*TrafficAnalytics, error) {
	out := new(TrafficAnalytics)
	err := c.cc.Invoke(ctx, TrafficAnalyzer_GetNextWeekPredictions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrafficAnalyzerServer is the server API for TrafficAnalyzer service.
// All implementations must embed UnimplementedTrafficAnalyzerServer
// for forward compatibility
type TrafficAnalyzerServer interface {
	ReceiveData(context.Context, *TrafficData) (*TrafficDataReceiveResponse, error)
	GetTodayStatistics(context.Context, *IntersectionRequest) (*TrafficAnalytics, error)
	GetLastWeekStatistics(context.Context, *IntersectionRequest) (*TrafficAnalytics, error)
	GetNextWeekPredictions(context.Context, *IntersectionRequest) (*TrafficAnalytics, error)
	mustEmbedUnimplementedTrafficAnalyzerServer()
}

// UnimplementedTrafficAnalyzerServer must be embedded to have forward compatible implementations.
type UnimplementedTrafficAnalyzerServer struct {
}

func (UnimplementedTrafficAnalyzerServer) ReceiveData(context.Context, *TrafficData) (*TrafficDataReceiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveData not implemented")
}
func (UnimplementedTrafficAnalyzerServer) GetTodayStatistics(context.Context, *IntersectionRequest) (*TrafficAnalytics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodayStatistics not implemented")
}
func (UnimplementedTrafficAnalyzerServer) GetLastWeekStatistics(context.Context, *IntersectionRequest) (*TrafficAnalytics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastWeekStatistics not implemented")
}
func (UnimplementedTrafficAnalyzerServer) GetNextWeekPredictions(context.Context, *IntersectionRequest) (*TrafficAnalytics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextWeekPredictions not implemented")
}
func (UnimplementedTrafficAnalyzerServer) mustEmbedUnimplementedTrafficAnalyzerServer() {}

// UnsafeTrafficAnalyzerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrafficAnalyzerServer will
// result in compilation errors.
type UnsafeTrafficAnalyzerServer interface {
	mustEmbedUnimplementedTrafficAnalyzerServer()
}

func RegisterTrafficAnalyzerServer(s grpc.ServiceRegistrar, srv TrafficAnalyzerServer) {
	s.RegisterService(&TrafficAnalyzer_ServiceDesc, srv)
}

func _TrafficAnalyzer_ReceiveData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrafficData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficAnalyzerServer).ReceiveData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrafficAnalyzer_ReceiveData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficAnalyzerServer).ReceiveData(ctx, req.(*TrafficData))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficAnalyzer_GetTodayStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntersectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficAnalyzerServer).GetTodayStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrafficAnalyzer_GetTodayStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficAnalyzerServer).GetTodayStatistics(ctx, req.(*IntersectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficAnalyzer_GetLastWeekStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntersectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficAnalyzerServer).GetLastWeekStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrafficAnalyzer_GetLastWeekStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficAnalyzerServer).GetLastWeekStatistics(ctx, req.(*IntersectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficAnalyzer_GetNextWeekPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntersectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficAnalyzerServer).GetNextWeekPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrafficAnalyzer_GetNextWeekPredictions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficAnalyzerServer).GetNextWeekPredictions(ctx, req.(*IntersectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrafficAnalyzer_ServiceDesc is the grpc.ServiceDesc for TrafficAnalyzer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrafficAnalyzer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.TrafficAnalyzer",
	HandlerType: (*TrafficAnalyzerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveData",
			Handler:    _TrafficAnalyzer_ReceiveData_Handler,
		},
		{
			MethodName: "GetTodayStatistics",
			Handler:    _TrafficAnalyzer_GetTodayStatistics_Handler,
		},
		{
			MethodName: "GetLastWeekStatistics",
			Handler:    _TrafficAnalyzer_GetLastWeekStatistics_Handler,
		},
		{
			MethodName: "GetNextWeekPredictions",
			Handler:    _TrafficAnalyzer_GetNextWeekPredictions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "traffic.proto",
}
